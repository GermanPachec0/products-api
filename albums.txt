// package main

// import (
// 	"database/sql"
// 	"fmt"
// 	"log"
// 	"net/http"
// 	"os"

// 	"github.com/gin-gonic/gin"
// 	"github.com/go-sql-driver/mysql"
// )

// type Product struct {
// 	ID                 int      `json:"id"`
// 	Title              string   `json:"title"`
// 	Description        string   `json:"description"`
// 	Price              int      `json:"price"`
// 	DiscountPercentage float64  `json:"discountPercentage"`
// 	Rating             float64  `json:"rating"`
// 	Stock              int      `json:"stock"`
// 	Brand              string   `json:"brand"`
// 	Category           string   `json:"category"`
// 	Thumbnail          string   `json:"thumbnail"`
// 	Images             []string `json:"images"`
// }

// type Products struct {
// 	Product []Product `json:"products"`
// }

// type Album struct {
// 	ID     string  `json:"id"`
// 	Title  string  `json:"title"`
// 	Artist string  `json:"artist"`
// 	Price  float64 `json:"price"`
// }

// var albums = []Album{
// 	{ID: "1", Title: "Blue Train", Artist: "John Coltrane", Price: 56.99},
// 	{ID: "2", Title: "Jeru", Artist: "Gerry Mulligan", Price: 17.99},
// 	{ID: "3", Title: "Sarah Vaughan and Clifford Brown", Artist: "Sarah Vaughan", Price: 39.99},
// }
// var db *sql.DB

// func main() {
// 	cfg := mysql.Config{
// 		User:                 os.Getenv("DBUSER"),
// 		Passwd:               os.Getenv("DBPASS"),
// 		Net:                  "tcp",
// 		Addr:                 "localhost",
// 		DBName:               "products",
// 		AllowNativePasswords: true,
// 	}

// 	var err error
// 	db, err = sql.Open("mysql", cfg.FormatDSN())
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	fmt.Println("Connected!")

// 	albums, err := albumsByArtist("John Coltrane")
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	fmt.Printf("Albums found: %v\n", albums)

// 	alb, err := albumByID(2)
// 	if err != nil {
// 		log.Fatal(err)
// 	}

// 	albID, err := addAlbum(Album{
// 		Title:  "The modern sound",
// 		Artist: "Betty Carter",
// 		Price:  49.99,
// 	})
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	fmt.Printf("ID of added album %v\n", albID)
// 	fmt.Printf("Album found: %v\n", alb)

// 	// router := gin.Default()
// 	// router.GET("/albums", getProducts)
// 	// router.Run("localhost:8080")
// 	// fmt.Println("Hello World")
// }

// func getProducts(c *gin.Context) {
// 	c.IndentedJSON(http.StatusOK, albums)

// }
// func albumsByArtist(name string) ([]Album, error) {
// 	// An albums slice to hold data from returned rows.
// 	var albums []Album

// 	rows, err := db.Query("SELECT * FROM album WHERE artist = ?", name)
// 	if err != nil {
// 		return nil, fmt.Errorf("albumsByArtist %q: %v", name, err)
// 	}
// 	defer rows.Close()
// 	// Loop through rows, using Scan to assign column data to struct fields.
// 	for rows.Next() {
// 		var alb Album
// 		if err := rows.Scan(&alb.ID, &alb.Title, &alb.Artist, &alb.Price); err != nil {
// 			return nil, fmt.Errorf("albumsByArtist %q: %v", name, err)
// 		}
// 		albums = append(albums, alb)
// 	}
// 	if err := rows.Err(); err != nil {
// 		return nil, fmt.Errorf("albumsByArtist %q: %v", name, err)
// 	}
// 	return albums, nil
// }

// func albumByID(id int64) (Album, error) {
// 	var alb Album
// 	row := db.QueryRow("SELECT * FROM album WHERE id = ?", id)
// 	if err := row.Scan(&alb.ID, &alb.Title, &alb.Artist, &alb.Price); err != nil {
// 		if err == sql.ErrNoRows {
// 			return alb, fmt.Errorf("albumsById %d: no such album", id)
// 		}
// 		return alb, fmt.Errorf("albumsById %d: %v", id, err)
// 	}
// 	return alb, nil
// }

// func addAlbum(alb Album) (int64, error) {
// 	result, err := db.Exec("INSERT INTO album (title,artist,price) VALUES(?,?,?)", alb.Title, alb.Artist, alb.Price)
// 	if err != nil {
// 		return 0, fmt.Errorf("addAlbum: %v", err)
// 	}
// 	id, err := result.LastInsertId()
// 	if err != nil {
// 		return 0, fmt.Errorf("addAlbum: %v", err)
// 	}
// 	return id, nil
// }
